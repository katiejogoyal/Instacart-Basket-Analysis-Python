{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5d90ffe2",
   "metadata": {},
   "source": [
    "# 4.7 Deriving New VAriables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6285b084",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing Libaries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e44b6723",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creat a string path\n",
    "path = r'/Users/katiejogoyal/Desktop/Career Foundry_Module_4/data'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a52d2869",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the pickled file\n",
    "df_ords_prods_comb = pd.read_pickle(os.path.join(path, 'orders_products_combined.pkl'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "962c37d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>eval_set</th>\n",
       "      <th>order_number</th>\n",
       "      <th>order_dow</th>\n",
       "      <th>order_hour_of_day</th>\n",
       "      <th>days_since_prior_order</th>\n",
       "      <th>product_id</th>\n",
       "      <th>add_to_cart_order</th>\n",
       "      <th>reordered</th>\n",
       "      <th>_merge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2539329</td>\n",
       "      <td>1</td>\n",
       "      <td>prior</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>7.0</td>\n",
       "      <td>196</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2539329</td>\n",
       "      <td>1</td>\n",
       "      <td>prior</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>7.0</td>\n",
       "      <td>14084</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2539329</td>\n",
       "      <td>1</td>\n",
       "      <td>prior</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>7.0</td>\n",
       "      <td>12427</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2539329</td>\n",
       "      <td>1</td>\n",
       "      <td>prior</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>7.0</td>\n",
       "      <td>26088</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2539329</td>\n",
       "      <td>1</td>\n",
       "      <td>prior</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>7.0</td>\n",
       "      <td>26405</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_id  user_id eval_set  order_number  order_dow  order_hour_of_day  \\\n",
       "0   2539329        1    prior             1          2                  8   \n",
       "1   2539329        1    prior             1          2                  8   \n",
       "2   2539329        1    prior             1          2                  8   \n",
       "3   2539329        1    prior             1          2                  8   \n",
       "4   2539329        1    prior             1          2                  8   \n",
       "\n",
       "   days_since_prior_order  product_id  add_to_cart_order  reordered _merge  \n",
       "0                     7.0         196                  1          0   both  \n",
       "1                     7.0       14084                  2          0   both  \n",
       "2                     7.0       12427                  3          0   both  \n",
       "3                     7.0       26088                  4          0   both  \n",
       "4                     7.0       26405                  5          0   both  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Show data\n",
    "df_ords_prods_comb.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ae3c0b8",
   "metadata": {},
   "source": [
    "# Create price_label Column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7b8cd987",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a subset for first million rows\n",
    "df = df_ords_prods_comb [:100000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a1676f93",
   "metadata": {},
   "outputs": [],
   "source": [
    "def price_label(row):\n",
    "    if row['price'] < 10:\n",
    "        return 'Low'\n",
    "    elif row['price'] < 20:\n",
    "        return 'Medium'\n",
    "    else:\n",
    "        return 'High'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4fd6683d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating a price column\n",
    "df = pd.DataFrame({\n",
    "    'price': [5, 15, 25, 7, 12]\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "66d390e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# createing a new column price_range\n",
    "df['price_range'] = df.apply(price_label, axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "17abb5fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   price price_range\n",
      "0      5         Low\n",
      "1     15      Medium\n",
      "2     25        High\n",
      "3      7         Low\n",
      "4     12      Medium\n"
     ]
    }
   ],
   "source": [
    "# Display the DataFrame\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ebcb55f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply price range function\n",
    "df['price_range'] = df.apply(price_label, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "77f8531c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Low       2\n",
       "Medium    2\n",
       "High      1\n",
       "Name: price_range, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#defining price Low, Medium and high\n",
    "df['price_range'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9a6a409e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find most expensive product\n",
    "\n",
    "df['price'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "59ebdb5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use loc() method on df subset to apply price range function.\n",
    "\n",
    "df.loc[df['price'] > 15, 'price_range_loc'] = 'High-range product'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "57ddd40a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[(df['price'] <= 15) & (df['price'] > 5), 'price_range_loc'] = 'Mid-range product'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "21c98da1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df['price'] <= 5, 'price_range_loc'] = 'Low-range product'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ca771878",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mid-range product     3\n",
       "Low-range product     1\n",
       "High-range product    1\n",
       "Name: price_range_loc, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['price_range_loc'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "384b1cc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change order_dow column name to order day of week\n",
    "\n",
    "df_ords_prods_comb.rename(columns = {'order_dow' : 'orders_day_of_week'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e3046d24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    6209666\n",
       "1    5665856\n",
       "6    4500304\n",
       "2    4217798\n",
       "5    4209533\n",
       "3    3844117\n",
       "4    3787215\n",
       "Name: orders_day_of_week, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find frequency of orders day of week.\n",
    "\n",
    "df_ords_prods_comb['orders_day_of_week'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "765423f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define Result list\n",
    "result = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "74109a91",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use for-loop to determine the type of day\n",
    "for value in df_ords_prods_comb[\"orders_day_of_week\"]:\n",
    "    if value == 0:\n",
    "        result.append(\"Busiest day\")\n",
    "    elif value == 4:\n",
    "        result.append(\"Least busy\")\n",
    "    else:\n",
    "        result.append(\"Regularly busy\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "5f90bc8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Least busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy', 'Regularly busy']\n"
     ]
    }
   ],
   "source": [
    "# Print only the first 100 results to avoid exceeding the data rate limit\n",
    "print(result[:100])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e0c05f4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create new column for busiest period of day in ords_prods_comb\n",
    "\n",
    "df_ords_prods_comb['busiest_period_of_day'] = result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5156c68c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Regularly busy    22437608\n",
       "Busiest day        6209666\n",
       "Least busy         3787215\n",
       "Name: busiest_period_of_day, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Print value counts in busiest period of the day column.\n",
    "\n",
    "df_ords_prods_comb['busiest_period_of_day'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dd6fc6c",
   "metadata": {},
   "source": [
    "# Export dataframe as a pickle file\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "5bfe5c8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ords_prods_comb.to_pickle(os.path.join(path,'/Users/katiejogoyal/Desktop/Career Foundry_Module_4/data.pkl'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88d11e21",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
